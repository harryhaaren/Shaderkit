
#line 3 "lex.glsl.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer glsl_create_buffer
#define yy_delete_buffer glsl_delete_buffer
#define yy_flex_debug glsl_flex_debug
#define yy_init_buffer glsl_init_buffer
#define yy_flush_buffer glsl_flush_buffer
#define yy_load_buffer_state glsl_load_buffer_state
#define yy_switch_to_buffer glsl_switch_to_buffer
#define yyin glslin
#define yyleng glslleng
#define yylex glsllex
#define yylineno glsllineno
#define yyout glslout
#define yyrestart glslrestart
#define yytext glsltext
#define yywrap glslwrap
#define yyalloc glslalloc
#define yyrealloc glslrealloc
#define yyfree glslfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE glslrestart(glslin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int glslleng;

extern FILE *glslin, *glslout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glsltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up glsltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via glslrestart()), so that the user can continue scanning by
	 * just pointing glslin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when glsltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int glslleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow glslwrap()'s to do buffer switches
 * instead of setting up a fresh glslin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void glslrestart (FILE *input_file  );
void glsl_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE glsl_create_buffer (FILE *file,int size  );
void glsl_delete_buffer (YY_BUFFER_STATE b  );
void glsl_flush_buffer (YY_BUFFER_STATE b  );
void glslpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void glslpop_buffer_state (void );

static void glslensure_buffer_stack (void );
static void glsl_load_buffer_state (void );
static void glsl_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER glsl_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE glsl_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE glsl_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE glsl_scan_bytes (yyconst char *bytes,int len  );

void *glslalloc (yy_size_t  );
void *glslrealloc (void *,yy_size_t  );
void glslfree (void *  );

#define yy_new_buffer glsl_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        glslensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glsl_create_buffer(glslin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        glslensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            glsl_create_buffer(glslin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define glslwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *glslin = (FILE *) 0, *glslout = (FILE *) 0;

typedef int yy_state_type;

extern int glsllineno;

int glsllineno = 1;

extern char *glsltext;
#define yytext_ptr glsltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up glsltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	glslleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 158
#define YY_END_OF_BUFFER 159
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[461] =
    {   0,
        0,    0,    0,    0,  159,  157,  152,  156,  156,  119,
      120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
      145,  145,  130,  131,  132,  133,  134,  135,  143,  136,
      137,  138,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  139,  140,  141,  142,    2,  154,  155,  152,  156,
        4,    6,    7,    5,    9,   10,   11,   12,   13,  150,
        1,    3,   14,  150,  147,    0,    0,  144,    0,  145,
       15,   17,   18,   19,   20,  143,   22,    8,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   37,  143,  143,

      143,  143,  143,   43,   44,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,   23,   24,
        2,  154,  153,    0,  150,    3,  150,  146,    0,  151,
      149,   16,   21,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,   41,  143,  143,   46,
      143,  143,  143,  143,  143,  143,  143,  143,   76,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,    0,  150,  151,  148,  143,   26,
      143,  143,   31,  143,  143,  143,  143,  143,   38,  143,

       39,  143,  143,  143,  143,  143,  143,  143,   61,   62,
       66,   70,  143,  143,  143,  143,  143,  143,  143,  143,
      117,   97,  143,  143,  143,  143,  112,  113,  114,  115,
      143,  143,   27,   28,   29,   30,  143,   33,  143,  143,
      143,  118,   40,   42,   45,  143,  143,   57,   58,   59,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  108,  109,  110,  143,  116,  143,
      143,  143,  143,  143,  143,  143,   60,   63,   64,   65,
       67,   68,   69,   71,   72,   73,  143,  143,  143,   78,
      143,   94,   95,   96,  143,  143,  143,  143,  143,  143,

       35,   36,  143,  143,   74,  143,  143,  143,   98,  143,
      111,  143,   32,   34,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,   25,   47,  143,  143,  143,  143,
      143,  143,   77,   79,   83,   90,  143,  143,  143,  143,
      143,  143,  143,   48,   50,   54,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,   99,  101,  105,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,   86,  143,  143,  143,   92,  143,  143,  143,
      143,  143,  143,  143,  143,   52,  143,  143,   56,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  103,

      143,  143,  107,  143,  143,  143,  143,   75,  143,  143,
      143,   87,  143,   91,  143,  143,  143,  143,  143,  143,
      143,   53,   55,   80,  143,   84,  143,  143,  143,  143,
      143,  104,  106,   49,   51,  143,   82,  143,  143,   89,
      143,  100,  102,  143,  143,  143,  143,  143,  143,  143,
       93,  143,  143,  143,  143,  143,   88,   81,   85,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,    1,   30,   31,   32,   33,   34,   35,
       36,   36,   36,   36,   36,   36,   37,   36,   36,   36,
       36,   38,   39,   36,   40,   36,   36,   41,   36,   36,
       42,    1,   43,   44,   36,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   36,   54,   55,   56,   57,
       58,   59,   36,   60,   61,   62,   63,   64,   65,   66,
       67,   36,   68,   69,   70,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    2,    1,    1,    1,    1,    1,    1,
        3,    1,    1,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    4,    4,    6,    6,    6,    6,    6,
        6,    1,    1,    1,    5,    5,    5,    5,    4,    4,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[469] =
    {   0,
        0,  591,   69,   71,  596,  598,  593,  590,  590,  565,
      564,   68,  598,  598,  563,   65,  598,   64,   66,   82,
       95,  147,  598,  598,   70,  562,   72,  598,    0,  598,
      598,   63,  526,   44,   74,   72,  532,   79,  533,   81,
       36,   56,  527,  521,  523,  533,   94,  521,   90,  126,
      528,  598,   79,  598,  598,    0,    0,  563,  576,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  139,
      598,    0,  598,  142,   86,  180,  199,  598,    0,    0,
      550,  598,  598,  598,  549,    0,  598,  598,  513,  516,
      524,  523,  510,  513,  512,  518,  506,    0,  505,  510,

       75,  504,  512,    0,  121,  517,  512,  493,  494,  496,
      509,  497,  493,  505,  491,  496,  493,  490,  496,  485,
      490,  493,  500,  495,  483,  495,  488,  487,  598,  598,
        0,    0,  598,  213,  598,    0,  159,  598,  220,  227,
      100,  598,  598,  479,  483,  492,  489,  486,  472,  143,
      488,  485,  482,  469,  467,  483,    0,  475,  463,    0,
      480,  468,  476,  464,  462,  232,  467,  470,    0,  471,
      454,  457,  457,  451,  451,  463,  449,  460,  453,  461,
      440,  235,  458,  450,  246,  253,  598,  598,  451,    0,
      449,  238,    0,  442,  439,  447,  436,  453,    0,  448,

        0,  434,  436,  432,  433,  433,  259,  428,    0,  424,
      423,  422,  424,  426,  432,  424,  428,  420,  434,  433,
        0,    0,  421,  419,  262,  424,    0,    0,    0,    0,
      427,  429,    0,    0,    0,    0,  416,    0,  416,  417,
      411,    0,    0,    0,    0,  417,  414,    0,    0,    0,
      406,  265,  270,  273,  411,  405,  404,  407,  414,  410,
      399,  408,  399,  403,    0,    0,    0,  400,    0,  393,
      402,  391,  391,  404,  406,  401,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  390,  389,  394,    0,
      386,    0,    0,    0,  389,  395,  392,  380,  393,  391,

        0,    0,  382,  378,    0,  388,  378,  277,    0,  375,
        0,  385,    0,    0,  371,  280,  385,  374,  397,  396,
      395,  364,  363,  286,    0,    0,  392,  391,  390,  359,
      358,  358,    0,  116,  277,    0,  369,  372,  384,  383,
      382,  351,  350,  382,  283,    0,  361,  364,  356,  348,
      355,  346,  366,  355,  351,  352,  352,  370,  289,    0,
      349,  352,  337,  336,  356,  345,  343,  343,  327,  330,
      344,  328,    0,  340,  341,  336,  345,  323,  322,  342,
      331,  329,  329,  317,  316,    0,  328,  325,    0,  324,
      327,  323,  325,  307,  320,  307,  314,  305,  304,    0,

      316,  313,    0,  316,  315,  297,  298,    0,  290,  292,
      278,  305,  280,    0,  280,  279,  278,  260,  250,  235,
      234,    0,    0,  248,  196,  221,  176,  161,  176,  156,
      148,    0,    0,    0,    0,  160,    0,  155,  161,    0,
      132,    0,    0,  141,  137,  132,  113,  124,  112,   99,
        0,   95,   83,   63,   57,   46,    0,    0,    0,  598,
      327,  330,  336,  342,   99,  348,   75,  351
    } ;

static yyconst flex_int16_t yy_def[469] =
    {   0,
      460,    1,  461,  461,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  462,  460,
      460,  460,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  460,  460,  460,  460,  463,  464,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  465,
      460,  466,  460,  467,   21,  460,  460,  460,  468,   22,
      460,  460,  460,  460,  460,  462,  460,  460,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  460,  460,
      463,  464,  460,  460,  460,  466,  467,  460,  460,  460,
      468,  460,  460,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  460,  460,  460,  460,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,  462,
      462,  462,  462,  462,  462,  462,  462,  462,  462,    0,
      460,  460,  460,  460,  460,  460,  460,  460
    } ;

static yyconst flex_int16_t yy_nxt[670] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   22,   22,
       22,   22,   22,   23,   24,   25,   26,   27,   28,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       29,   39,   40,   29,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   29,   29,   52,   53,   54,
       55,    8,    9,    8,    9,   63,   66,   68,  137,   58,
      108,   58,   70,   70,   70,   70,   70,   70,   70,   87,
       69,   67,   71,  109,   64,   81,   82,   72,   84,   85,

      110,   90,   70,   91,  111,  129,   88,   92,   73,   74,
      459,   75,   75,   75,   75,   75,   75,   76,   93,  155,
       96,  458,   94,  100,   97,  138,  460,  457,   77,   98,
      104,   95,  156,  101,   78,   79,  102,  105,  116,  188,
      456,  106,  121,   77,  107,  350,  122,  130,  138,  117,
      123,  460,  455,  124,  351,  118,  454,   78,  119,  453,
       79,   74,  188,   80,   80,   80,   80,   80,   80,   80,
      125,  452,  134,  135,  126,  134,  135,  451,  159,  450,
       77,  449,  160,  127,  161,  448,   78,  134,  135,  447,
      134,  135,  134,  135,   74,   77,   76,   76,   76,   76,

       76,   76,   76,  195,  196,  446,  445,  134,  135,   78,
      139,  444,  139,   77,  443,  140,  140,  140,  140,  140,
      140,  140,  442,  441,  185,  440,  185,  439,   77,  186,
      186,  186,  186,  186,  186,  186,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      210,  211,  212,  227,  228,  229,  234,  235,  236,  438,
      437,  187,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  187,  248,  249,  250,
      265,  266,  267,  278,  279,  280,  436,  135,  281,  282,
      283,  284,  285,  286,  319,  320,  321,  327,  328,  329,

      435,  434,  135,  339,  340,  341,  352,  322,  323,  433,
      330,  331,  364,  353,  354,  355,  342,  343,  379,  365,
      366,  432,  431,  430,  429,  380,  381,   57,   57,   57,
       57,   57,   57,   86,   86,   86,  131,  428,  131,  131,
      131,  131,  132,  427,  426,  132,  132,  132,  136,  425,
      136,  136,  136,  136,  141,  141,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  378,

      377,  376,  375,  374,  373,  372,  371,  370,  369,  368,
      367,  363,  362,  361,  360,  359,  358,  357,  356,  349,
      348,  347,  346,  345,  344,  338,  337,  336,  335,  334,
      333,  332,  326,  325,  324,  318,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  292,  291,  290,  289,  288,  287,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  247,  246,  245,  244,  243,  242,  241,  240,  239,

      238,  237,  233,  232,  231,  230,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  194,  193,  192,  191,  190,  189,  184,
      183,  182,  181,  180,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  158,  157,  154,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,   59,  133,  128,
      120,  115,  114,  113,  112,  103,   99,   89,   83,   65,
       62,   61,   60,   60,   59,  460,   56,    5,  460,  460,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460
    } ;

static yyconst flex_int16_t yy_chk[670] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,   12,   16,   18,  467,    3,
       41,    4,   19,   19,   19,   19,   19,   19,   19,   32,
       18,   16,   20,   41,   12,   25,   25,   20,   27,   27,

       42,   34,  465,   34,   42,   53,   32,   34,   20,   21,
      456,   21,   21,   21,   21,   21,   21,   21,   35,  101,
       36,  455,   35,   38,   36,   75,   75,  454,   21,   36,
       40,   35,  101,   38,   21,   21,   38,   40,   47,  141,
      453,   40,   49,   21,   40,  334,   49,   53,   75,   47,
       49,   75,  452,   49,  334,   47,  450,   21,   47,  449,
       21,   22,  141,   22,   22,   22,   22,   22,   22,   22,
       50,  448,   70,   70,   50,   74,   74,  447,  105,  446,
       22,  445,  105,   50,  105,  444,   22,   70,   70,  441,
       74,   74,  137,  137,   76,   22,   76,   76,   76,   76,

       76,   76,   76,  150,  150,  439,  438,  137,  137,   22,
       77,  436,   77,   76,  431,   77,   77,   77,   77,   77,
       77,   77,  430,  429,  134,  428,  134,  427,   76,  134,
      134,  134,  134,  134,  134,  134,  139,  139,  139,  139,
      139,  139,  139,  140,  140,  140,  140,  140,  140,  140,
      166,  166,  166,  182,  182,  182,  192,  192,  192,  426,
      425,  140,  185,  185,  185,  185,  185,  185,  185,  186,
      186,  186,  186,  186,  186,  186,  140,  207,  207,  207,
      225,  225,  225,  252,  252,  252,  424,  186,  253,  253,
      253,  254,  254,  254,  308,  308,  308,  316,  316,  316,

      421,  420,  186,  324,  324,  324,  335,  308,  308,  419,
      316,  316,  345,  335,  335,  335,  324,  324,  359,  345,
      345,  418,  417,  416,  415,  359,  359,  461,  461,  461,
      461,  461,  461,  462,  462,  462,  463,  413,  463,  463,
      463,  463,  464,  412,  411,  464,  464,  464,  466,  410,
      466,  466,  466,  466,  468,  468,  409,  407,  406,  405,
      404,  402,  401,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  388,  387,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  358,

      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  344,  343,  342,  341,  340,  339,  338,  337,  332,
      331,  330,  329,  328,  327,  323,  322,  321,  320,  319,
      318,  317,  315,  312,  310,  307,  306,  304,  303,  300,
      299,  298,  297,  296,  295,  291,  289,  288,  287,  276,
      275,  274,  273,  272,  271,  270,  268,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  251,  247,  246,
      241,  240,  239,  237,  232,  231,  226,  224,  223,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      208,  206,  205,  204,  203,  202,  200,  198,  197,  196,

      195,  194,  191,  189,  184,  183,  181,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  168,  167,
      165,  164,  163,  162,  161,  159,  158,  156,  155,  154,
      153,  152,  151,  149,  148,  147,  146,  145,  144,  128,
      127,  126,  125,  124,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  109,  108,
      107,  106,  103,  102,  100,   99,   97,   96,   95,   94,
       93,   92,   91,   90,   89,   85,   81,   59,   58,   51,
       48,   46,   45,   44,   43,   39,   37,   33,   26,   15,
       11,   10,    9,    8,    7,    5,    2,  460,  460,  460,

      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  460
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int glsl_flex_debug;
int glsl_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *glsltext;
#line 1 "shader/glsl.l"
/**
 * Copyright 2010,2011 Riku Palomäki.
 * This file is part of GLSL Lab.
 *
 * GLSL Lab is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License Version 3 as
 * published by the Free Software Foundation.
 *
 * GLSL Lab is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GLSL Lab.  If not, see <http://www.gnu.org/licenses/>.
 */
#line 19 "shader/glsl.l"
#include "glsl_yacc.h"
static int s_column, s_line, s_pos;

#ifdef _MSC_VER
#include <io.h>
#define isatty _isatty
#define fileno _fileno
#endif

#line 797 "lex.glsl.c"

#define INITIAL 0
#define IN_COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int glsllex_destroy (void );

int glslget_debug (void );

void glslset_debug (int debug_flag  );

YY_EXTRA_TYPE glslget_extra (void );

void glslset_extra (YY_EXTRA_TYPE user_defined  );

FILE *glslget_in (void );

void glslset_in  (FILE * in_str  );

FILE *glslget_out (void );

void glslset_out  (FILE * out_str  );

int glslget_leng (void );

char *glslget_text (void );

int glslget_lineno (void );

void glslset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int glslwrap (void );
#else
extern int glslwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( glsltext, glslleng, 1, glslout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( glslin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( glslin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, glslin))==0 && ferror(glslin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(glslin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int glsllex (void);

#define YY_DECL int glsllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after glsltext and glslleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( glslleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(glsltext[glslleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 35 "shader/glsl.l"


#line 986 "lex.glsl.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! glslin )
			glslin = stdin;

		if ( ! glslout )
			glslout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			glslensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				glsl_create_buffer(glslin,YY_BUF_SIZE );
		}

		glsl_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of glsltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 461 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 460 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 37 "shader/glsl.l"
{ BEGIN(IN_COMMENT); return COMMENT_BEGIN; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 38 "shader/glsl.l"
{ return PP; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 39 "shader/glsl.l"
{ return COMMENT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 40 "shader/glsl.l"
{ return NE_OP; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 41 "shader/glsl.l"
{ return AND_ASSIGN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 42 "shader/glsl.l"
{ return MOD_ASSIGN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 43 "shader/glsl.l"
{ return AND_OP; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "shader/glsl.l"
{ return XOR_OP; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 45 "shader/glsl.l"
{ return MUL_ASSIGN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 46 "shader/glsl.l"
{ return INC_OP; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 47 "shader/glsl.l"
{ return ADD_ASSIGN; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 48 "shader/glsl.l"
{ return DEC_OP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 49 "shader/glsl.l"
{ return SUB_ASSIGN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 50 "shader/glsl.l"
{ return DIV_ASSIGN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 51 "shader/glsl.l"
{ return LEFT_OP; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 52 "shader/glsl.l"
{ return LEFT_ASSIGN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 53 "shader/glsl.l"
{ return LE_OP; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 54 "shader/glsl.l"
{ return EQ_OP; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 55 "shader/glsl.l"
{ return GE_OP; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 56 "shader/glsl.l"
{ return RIGHT_OP; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 57 "shader/glsl.l"
{ return RIGHT_ASSIGN; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 58 "shader/glsl.l"
{ return XOR_ASSIGN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 59 "shader/glsl.l"
{ return OR_ASSIGN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 60 "shader/glsl.l"
{ return OR_OP; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 61 "shader/glsl.l"
{ return ATTRIBUTE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 62 "shader/glsl.l"
{ return BOOL; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 63 "shader/glsl.l"
{ return BREAK; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 64 "shader/glsl.l"
{ return BVEC2; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 65 "shader/glsl.l"
{ return BVEC3; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 66 "shader/glsl.l"
{ return BVEC4; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 67 "shader/glsl.l"
{ return CASE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 68 "shader/glsl.l"
{ return CENTROID; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 69 "shader/glsl.l"
{ return CONST; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 70 "shader/glsl.l"
{ return CONTINUE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 71 "shader/glsl.l"
{ return DEFAULT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 72 "shader/glsl.l"
{ return DISCARD; }
	YY_BREAK
/* "dmat2"	{ return DMAT2; }
"dmat2x2"	{ return DMAT2X2; }
"dmat2x3"	{ return DMAT2X3; }
"dmat2x4"	{ return DMAT2X4; }
"dmat3"	{ return DMAT3; }
"dmat3x2"	{ return DMAT3X2; }
"dmat3x3"	{ return DMAT3X3; }
"dmat3x4"	{ return DMAT3X4; }
"dmat4"	{ return DMAT4; }
"dmat4x2"	{ return DMAT4X2; }
"dmat4x3"	{ return DMAT4X3; }
"dmat4x4"	{ return DMAT4X4; } */
case 37:
YY_RULE_SETUP
#line 85 "shader/glsl.l"
{ return DO; }
	YY_BREAK
/*"double"	{ return DOUBLE; }
"dvec2"	{ return DVEC2; }
"dvec3"	{ return DVEC3; }
"dvec4"	{ return DVEC4; } */
case 38:
YY_RULE_SETUP
#line 90 "shader/glsl.l"
{ return ELSE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 91 "shader/glsl.l"
{ return FLAT; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 92 "shader/glsl.l"
{ return FLOAT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "shader/glsl.l"
{ return FOR; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "shader/glsl.l"
{ return HIGH_PRECISION; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "shader/glsl.l"
{ return IF; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "shader/glsl.l"
{ return IN; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "shader/glsl.l"
{ return INOUT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "shader/glsl.l"
{ return INT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "shader/glsl.l"
{ return INVARIANT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "shader/glsl.l"
{ return ISAMPLER1D; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "shader/glsl.l"
{ return ISAMPLER1DARRAY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "shader/glsl.l"
{ return ISAMPLER2D; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "shader/glsl.l"
{ return ISAMPLER2DARRAY; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "shader/glsl.l"
{ return ISAMPLER2DMS; }
	YY_BREAK
/* "isampler2DMSArray"	{ return ISAMPLER2DMSArray; } */
case 53:
YY_RULE_SETUP
#line 106 "shader/glsl.l"
{ return ISAMPLER2DRECT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "shader/glsl.l"
{ return ISAMPLER3D; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "shader/glsl.l"
{ return ISAMPLERBUFFER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "shader/glsl.l"
{ return ISAMPLERCUBE; }
	YY_BREAK
/* "isamplerCubeArray"	{ return ISAMPLERCUBEARRAY; } */
case 57:
YY_RULE_SETUP
#line 111 "shader/glsl.l"
{ return IVEC2; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "shader/glsl.l"
{ return IVEC3; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "shader/glsl.l"
{ return IVEC4; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "shader/glsl.l"
{ return LAYOUT; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "shader/glsl.l"
{ return LOW_PRECISION; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "shader/glsl.l"
{ return MAT2; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "shader/glsl.l"
{ return MAT2X2; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "shader/glsl.l"
{ return MAT2X3; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "shader/glsl.l"
{ return MAT2X4; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "shader/glsl.l"
{ return MAT3; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "shader/glsl.l"
{ return MAT3X2; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "shader/glsl.l"
{ return MAT3X3; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "shader/glsl.l"
{ return MAT3X4; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "shader/glsl.l"
{ return MAT4; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "shader/glsl.l"
{ return MAT4X2; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "shader/glsl.l"
{ return MAT4X3; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "shader/glsl.l"
{ return MAT4X4; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "shader/glsl.l"
{ return MEDIUM_PRECISION; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "shader/glsl.l"
{ return NOPERSPECTIVE; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "shader/glsl.l"
{ return OUT; }
	YY_BREAK
/* "patch"	{ return PATCH; } */
case 77:
YY_RULE_SETUP
#line 132 "shader/glsl.l"
{ return PRECISION; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 133 "shader/glsl.l"
{ return RETURN; }
	YY_BREAK
/* "sample"	{ return SAMPLE; } */
case 79:
YY_RULE_SETUP
#line 135 "shader/glsl.l"
{ return SAMPLER1D; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 136 "shader/glsl.l"
{ return SAMPLER1DARRAY; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 137 "shader/glsl.l"
{ return SAMPLER1DARRAYSHADOW; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 138 "shader/glsl.l"
{ return SAMPLER1DSHADOW; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 139 "shader/glsl.l"
{ return SAMPLER2D; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 140 "shader/glsl.l"
{ return SAMPLER2DARRAY; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 141 "shader/glsl.l"
{ return SAMPLER2DARRAYSHADOW; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 142 "shader/glsl.l"
{ return SAMPLER2DMS; }
	YY_BREAK
/* "sampler2DMSArray"	{ return SAMPLER2DMSArray; } */
case 87:
YY_RULE_SETUP
#line 144 "shader/glsl.l"
{ return SAMPLER2DRECT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 145 "shader/glsl.l"
{ return SAMPLER2DRECTSHADOW; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 146 "shader/glsl.l"
{ return SAMPLER2DSHADOW; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 147 "shader/glsl.l"
{ return SAMPLER3D; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 148 "shader/glsl.l"
{ return SAMPLERBUFFER; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 149 "shader/glsl.l"
{ return SAMPLERCUBE; }
	YY_BREAK
/* "samplerCubeArray"	{ return SAMPLERCUBEARRAY; }
"samplerCubeArrayShadow"	{ return SAMPLERCUBEARRAYSHADOW; } */
case 93:
YY_RULE_SETUP
#line 152 "shader/glsl.l"
{ return SAMPLERCUBESHADOW; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "shader/glsl.l"
{ return SMOOTH; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "shader/glsl.l"
{ return STRUCT; }
	YY_BREAK
/* "subroutine"	{ return SUBROUTINE; } */
case 96:
YY_RULE_SETUP
#line 156 "shader/glsl.l"
{ return SWITCH; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "shader/glsl.l"
{ return UINT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "shader/glsl.l"
{ return UNIFORM; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "shader/glsl.l"
{ return USAMPLER1D; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "shader/glsl.l"
{ return USAMPLER1DARRAY; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "shader/glsl.l"
{ return USAMPLER2D; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "shader/glsl.l"
{ return USAMPLER2DARRAY; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "shader/glsl.l"
{ return USAMPLER2DMS; }
	YY_BREAK
/* "usampler2DMSArray"	{ return USAMPLER2DMSArray; } */
case 104:
YY_RULE_SETUP
#line 165 "shader/glsl.l"
{ return USAMPLER2DRECT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "shader/glsl.l"
{ return USAMPLER3D; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "shader/glsl.l"
{ return USAMPLERBUFFER; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "shader/glsl.l"
{ return USAMPLERCUBE; }
	YY_BREAK
/* "usamplerCubeArray"	{ return USAMPLERCUBEARRAY; } */
case 108:
YY_RULE_SETUP
#line 170 "shader/glsl.l"
{ return UVEC2; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 171 "shader/glsl.l"
{ return UVEC3; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 172 "shader/glsl.l"
{ return UVEC4; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 173 "shader/glsl.l"
{ return VARYING; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 174 "shader/glsl.l"
{ return VEC2; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 175 "shader/glsl.l"
{ return VEC3; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 176 "shader/glsl.l"
{ return VEC4; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 177 "shader/glsl.l"
{ return VOID; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 178 "shader/glsl.l"
{ return WHILE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 180 "shader/glsl.l"
{ return TRUECONSTANT; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 181 "shader/glsl.l"
{ return FALSECONSTANT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 183 "shader/glsl.l"
{ return '!'; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "shader/glsl.l"
{ return '%'; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "shader/glsl.l"
{ return '&'; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 186 "shader/glsl.l"
{ return '('; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 187 "shader/glsl.l"
{ return ')'; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 188 "shader/glsl.l"
{ return '*'; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 189 "shader/glsl.l"
{ return '+'; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 190 "shader/glsl.l"
{ return ','; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 191 "shader/glsl.l"
{ return '-'; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 192 "shader/glsl.l"
{ return '.'; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 193 "shader/glsl.l"
{ return '/'; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 194 "shader/glsl.l"
{ return ':'; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 195 "shader/glsl.l"
{ return ';'; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 196 "shader/glsl.l"
{ return '<'; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 197 "shader/glsl.l"
{ return '='; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 198 "shader/glsl.l"
{ return '>'; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 199 "shader/glsl.l"
{ return '?'; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 200 "shader/glsl.l"
{ return '['; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 201 "shader/glsl.l"
{ return ']'; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 202 "shader/glsl.l"
{ return '^'; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 203 "shader/glsl.l"
{ return '{'; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 204 "shader/glsl.l"
{ return '|'; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 205 "shader/glsl.l"
{ return '}'; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 206 "shader/glsl.l"
{ return '~'; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 208 "shader/glsl.l"
{ return IDENTIFIER; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 210 "shader/glsl.l"
{ return UINTCONSTANT; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 211 "shader/glsl.l"
{ return INTCONSTANT; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 213 "shader/glsl.l"
{ return UINTCONSTANT; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 214 "shader/glsl.l"
{ return INTCONSTANT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 216 "shader/glsl.l"
{ return UINTCONSTANT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 217 "shader/glsl.l"
{ return INTCONSTANT; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 219 "shader/glsl.l"
{ return FLOATCONSTANT; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 220 "shader/glsl.l"
{ return FLOATCONSTANT; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 222 "shader/glsl.l"
{ s_column += glslleng; }
	YY_BREAK

case 153:
YY_RULE_SETUP
#line 225 "shader/glsl.l"
{ BEGIN(INITIAL); return COMMENT_END; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 226 "shader/glsl.l"
{ s_column += glslleng; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 227 "shader/glsl.l"
{ s_column += glslleng; }
	YY_BREAK

case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 230 "shader/glsl.l"
{ s_pos += s_column + glslleng; s_column = 0; s_line++; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 232 "shader/glsl.l"
{ return ERROR; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 234 "shader/glsl.l"
ECHO;
	YY_BREAK
#line 1885 "lex.glsl.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed glslin at a new source and called
			 * glsllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = glslin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( glslwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * glsltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of glsllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					glslrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			glslrestart(glslin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) glslrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 461 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 461 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 460);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up glsltext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					glslrestart(glslin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( glslwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve glsltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void glslrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        glslensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            glsl_create_buffer(glslin,YY_BUF_SIZE );
	}

	glsl_init_buffer(YY_CURRENT_BUFFER,input_file );
	glsl_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void glsl_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		glslpop_buffer_state();
	 *		glslpush_buffer_state(new_buffer);
     */
	glslensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	glsl_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (glslwrap()) processing, but the only time this flag
	 * is looked at is after glslwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void glsl_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	glslin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE glsl_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) glslalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glsl_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) glslalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in glsl_create_buffer()" );

	b->yy_is_our_buffer = 1;

	glsl_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with glsl_create_buffer()
 * 
 */
    void glsl_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		glslfree((void *) b->yy_ch_buf  );

	glslfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a glslrestart() or at EOF.
 */
    static void glsl_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	glsl_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then glsl_init_buffer was _probably_
     * called from glslrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void glsl_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		glsl_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void glslpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	glslensure_buffer_stack();

	/* This block is copied from glsl_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from glsl_switch_to_buffer. */
	glsl_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void glslpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	glsl_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		glsl_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void glslensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)glslalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glslensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)glslrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in glslensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE glsl_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) glslalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in glsl_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	glsl_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to glsllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       glsl_scan_bytes() instead.
 */
YY_BUFFER_STATE glsl_scan_string (yyconst char * yystr )
{
    
	return glsl_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to glsllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE glsl_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) glslalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in glsl_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = glsl_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in glsl_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up glsltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		glsltext[glslleng] = (yy_hold_char); \
		(yy_c_buf_p) = glsltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		glslleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int glslget_lineno  (void)
{
        
    return glsllineno;
}

/** Get the input stream.
 * 
 */
FILE *glslget_in  (void)
{
        return glslin;
}

/** Get the output stream.
 * 
 */
FILE *glslget_out  (void)
{
        return glslout;
}

/** Get the length of the current token.
 * 
 */
int glslget_leng  (void)
{
        return glslleng;
}

/** Get the current token.
 * 
 */

char *glslget_text  (void)
{
        return glsltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void glslset_lineno (int  line_number )
{
    
    glsllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see glsl_switch_to_buffer
 */
void glslset_in (FILE *  in_str )
{
        glslin = in_str ;
}

void glslset_out (FILE *  out_str )
{
        glslout = out_str ;
}

int glslget_debug  (void)
{
        return glsl_flex_debug;
}

void glslset_debug (int  bdebug )
{
        glsl_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from glsllex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    glslin = stdin;
    glslout = stdout;
#else
    glslin = (FILE *) 0;
    glslout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * glsllex_init()
     */
    return 0;
}

/* glsllex_destroy is for both reentrant and non-reentrant scanners. */
int glsllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		glsl_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		glslpop_buffer_state();
	}

	/* Destroy the stack itself. */
	glslfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * glsllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *glslalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *glslrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void glslfree (void * ptr )
{
	free( (char *) ptr );	/* see glslrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 234 "shader/glsl.l"



int glsllex_wrapper(void) {
  int tmp = glsllex();
  s_column += glslleng;
  return tmp;
}

void glslset_scan_string(const char *str, int len, int state) {
  glsl_scan_bytes(str,len);
  s_column = 0;
  s_line = 0;
  s_pos = 0;
  if (state < INITIAL) state = INITIAL;
  BEGIN(state);
}

int glslget_state() {
  return YY_START;
}

int glslget_column(void) {
  return s_column;
}

int glslget_line(void) {
  return s_line;
}

int glslget_pos(void) {
  return s_pos+s_column;
}

