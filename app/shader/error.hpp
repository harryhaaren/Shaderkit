/**
 * Copyright 2010 Riku Palom√§ki.
 * This file is part of GLSL Lab.
 *
 * GLSL Lab is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License Version 3 as
 * published by the Free Software Foundation.
 *
 * GLSL Lab is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GLSL Lab.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef SHADER_ERROR_HPP
#define SHADER_ERROR_HPP

#include "app/forward.hpp"

#include <QString>

/**
 * ShaderError is a parsed GLSL compile error. These are generated by
 * ShaderCompilerOutputParser.
 */
class ShaderError {
public:
  /// @todo move to global namespace, so we don't need to include this file
  ///       to use the typedef
  typedef QList<ShaderError> List;

  ShaderError();
  /**
   * @param type Should be "error" or "warning", but might also be
   *        something implementation specific
   * @param line Line numbers start from 0
   * @param column Column numbers start from 0
   * @param length The length of the token/error area where the error was seen.
   *               Editor can use this information to underline the error part.
   */
  ShaderError(ShaderPtr shader, QString msg, QString type,
              int line, int column = 0, int length = 0);

  void setShader(ShaderPtr shader) { m_shader = shader; }
  void setLine(int line) { m_line = line; }
  void setColumn(int column) { m_column = column; }
  void setLength(int length) { m_length = length; }

  /// Error string, usually straight from the external GLSL compiler, but might
  /// be changed to fix line numbers or similar. The compiled source might have
  /// different line numbers to the source in the editor, see ShaderLexer::toLines
  const QString& msg() const { return m_msg; }

  /// Type of the error, can be "error", "warning" or some implementation dependent value
  const QString& type() const { return m_type; }

  /// The line number (starting from zero) the error begins
  int line() const { return m_line; }
  /// The column position (starting from zero) the error begins
  int column() const { return m_column; }
  /// The length of the error area, obviously only a guess
  int length() const { return m_length; }

  ShaderPtr shader() const { return m_shader; }

  /// Implemented only for containers that require this.
  bool operator<(const ShaderError& o) const;

protected:
  ShaderPtr m_shader;
  QString m_msg, m_type;
  int m_line, m_column, m_length;
};

#endif
