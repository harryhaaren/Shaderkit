
#line 3 "lex.pp.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE pprestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via pprestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void pprestart (FILE *input_file ,yyscan_t yyscanner );
void pp_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE pp_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void pp_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void pp_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void pppush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void pppop_buffer_state (yyscan_t yyscanner );

static void ppensure_buffer_stack (yyscan_t yyscanner );
static void pp_load_buffer_state (yyscan_t yyscanner );
static void pp_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER pp_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE pp_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE pp_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE pp_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *ppalloc (yy_size_t ,yyscan_t yyscanner );
void *pprealloc (void *,yy_size_t ,yyscan_t yyscanner );
void ppfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer pp_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        ppensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pp_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        ppensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            pp_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ppwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 72
#define YY_END_OF_BUFFER 73
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[252] =
    {   0,
       73,   72,   72,   45,   72,16428,   72,   72,   28,   33,
       72,   28,   33,   72,   32,   72,   30,   33,   72,   30,
       33,   72,   30,   33,   72,   31,   33,   72,   43,   72,
       41,   43,   72,   42,   72,   38,   43,   72,   39,   43,
       72,   43,   72,   40,   43,   72,   47,   49,   72,   48,
       72,   46,   49,   72,   47,   49,   72,   34,   72,   37,
       72,   35,   72,   35,   72,   34,   72,   36,   72,   72,
       72,   72,   72,    8,   72,    9,   72,    8,   72,    8,
       72,    8,   72,    8,   72,    8,   72,   71,   72,   69,
       71,   72,   70,   72,   63,   71,   72,   71,   72,   63,

       71,   72,   63,   71,   72,   63,   71,   72,   51,   71,
       72,   50,   71,   72,   63,   71,   72,   71,   72,   63,
       71,   72,   68,   71,   72,   68,   71,   72,   68,   71,
       72,   68,   71,   72,   68,   71,   72,   63,   71,   72,
        2,   72,    4,   72,    3,   72,    2,   72,    5,    6,
     8236,   45,16428,   23,   28,   28,   29,   31,   41,   38,
       40,   47,    5,   47,    6,   47,   34,   34,   34,   36,
       69,   58,   61,   59,   51,   51,   50,   50,   53,   55,
       57,   56,   54,   68,   68,   68,   68,   68,   68,   60,
        2,    1,    2,    6,    6,   17,   29,    6,   47,   52,

       68,   68,   68,   68,   68,    2,    6,    7,   52,   68,
       68,   68,   68,   66,   68,   11,   12,   68,   68,   68,
       68,   16,   10,   13,   12,   68,   68,   65,   68,   68,
       24,   15,   22,   20,   14,   62,   68,   67,   68,   64,
       68,   21,   20,   18,   25,   21,   27,   25,   26,   25,
       19
    } ;

static yyconst flex_int16_t yy_accept[282] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        7,    8,    9,   12,   15,   17,   20,   23,   26,   29,
       31,   34,   36,   39,   42,   44,   47,   50,   52,   55,
       58,   60,   62,   64,   66,   68,   70,   71,   72,   73,
       74,   76,   78,   80,   82,   84,   86,   88,   90,   93,
       95,   98,  100,  103,  106,  109,  112,  115,  118,  120,
      123,  126,  129,  132,  135,  138,  141,  143,  145,  147,
      149,  150,  151,  151,  152,  154,  154,  154,  154,  155,

      155,  155,  155,  155,  155,  155,  155,  156,  157,  157,
      158,  159,  160,  161,  162,  163,  165,  167,  168,  169,
      170,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  172,
      173,  174,  175,  176,  177,  177,  178,  179,  180,  181,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  193,  195,  196,  196,  196,  196,  197,  197,  197,
      197,  197,  197,  198,  200,  200,  200,  200,  200,  201,
      202,  203,  204,  205,  206,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      209,  209,  209,  210,  211,  212,  213,  214,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  217,  218,  219,  220,  221,  222,  222,  222,
      222,  223,  223,  223,  223,  223,  223,  223,  223,  224,
      224,  225,  225,  226,  227,  228,  230,  231,  231,  231,
      232,  232,  233,  233,  233,  234,  235,  235,  235,  235,
      236,  238,  240,  242,  242,  242,  243,  244,  244,  245,
      246,  246,  247,  247,  248,  248,  249,  250,  251,  252,
      252
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    7,    8,    1,    9,
       10,   11,    7,   12,    7,    1,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,    7,    1,   17,
       18,   19,    1,    1,   20,   20,   20,   20,   20,   20,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   22,   21,   21,   23,   21,   21,
        1,    1,    1,    7,   21,    1,   24,   25,   26,   27,

       28,   29,   30,   21,   31,   21,   21,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       21,   21,    1,   45,    1,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    1,    6,    7,
        8,    7,    9,   10,   10,   10,    1,    1,    1,   11,
       12,   12,   12,   11,   11,   11,   11,   11,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    1
    } ;

static yyconst flex_int16_t yy_base[312] =
    {   0,
        0,   44,   50,   95,  140,    0,    0,    0,   61,   69,
      185,    0,    0,   74,    0,   81,   62,  113,   81,  115,
      107,  121,  230,    0,  126,  273,  770,  771,   36,   83,
       84,  285,    0,   87,  771,  763,  771,   98,    0,  771,
      766,  771,  765,  771,  120,    0,    0,  771,  771,  125,
        0,  771,  771,  267,  267,    0,  283,  277,  288,  290,
      771,  771,  280,  293,  294,  295,  300,  771,  764,  771,
      747,  758,  771,  755,  287,  292,  323,  286,  744,  290,
        0,   60,  727,  732,  735,  713,    0,  771,  744,  319,
      771,    0,  123,  771,  332,  317,    0,    0,  771,  728,

      291,  313,  724,  716,  719,  724,    0,  318,  745,  748,
        0,  747,  746,    0,    0,    0,  334,    0,  334,    0,
        0,  349,    0,    0,  322,  351,    0,    0,  324,  357,
      350,  359,  713,  717,  363,  365,  369,  338,  743,  771,
      771,  771,  360,  771,    0,  369,  771,  771,  771,  771,
      771,  771,    0,  715,  704,  718,  704,  702,  771,    0,
      771,  369,    0,  710,  700,  697,  352,  710,  701,  710,
      706,  694,  729,  393,  367,  703,  726,  368,  354,  697,
      703,  701,  684,  690,  400,  692,  687,  693,  692,  692,
      683,  686,  683,  683,  671,  680,  676,  672,  699,  771,

      672,  672,  771,  665,  662,  650,  650,    0,  646,  641,
      644,  648,  648,  634,  669,  637,  640,  637,  664,  663,
      636,  771,    0,  636,  621,  577,  519,  515,  528,  485,
      771,  491,  492,  500,  471,  492,  456,  477,  771,  475,
      771,  469,    0,  444,  442,    0,  440,  465,  463,  771,
      383,  771,  366,  389,  771,    0,  375,  306,  132,  771,
        0,    0,    0,  120,   42,    0,    0,  308,  771,  406,
       32,    0,  386,  771,  410,   46,  771,  407,  771,  771,
      416,  428,  440,  452,  463,  475,  473,  476,  488,  500,
      498,  501,  504,  516,  528,  540,  543,  554,  566,  578,

      590,  602,  614,  626,  638,  650,  661,  672,  684,  695,
      706
    } ;

static yyconst flex_int16_t yy_def[312] =
    {   0,
      280,    1,  281,  281,  280,    5,    1,    1,  282,  282,
      280,   11,    1,    1,    1,    1,  283,  283,  283,  283,
      283,  283,  280,   23,  284,  284,  280,  280,  280,  285,
      280,  280,  286,  286,  280,  280,  280,  280,  287,  280,
      280,  280,  280,  280,  280,  288,  289,  280,  280,  289,
      290,  280,  280,  280,  291,  292,  280,   32,  280,   32,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      293,  293,  293,  293,  293,  280,  294,  280,  280,  294,
      280,  295,  280,  280,  285,  280,   32,   32,  280,  280,

      280,  280,  280,  280,  280,  280,  286,  286,  280,  280,
      287,  280,  280,  288,  289,  289,  296,  290,  291,  291,
      292,  280,   58,   58,  280,  280,   60,   60,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  297,  280,  280,  280,  280,  280,
      280,  280,  293,  293,  293,  293,  293,  293,  280,  294,
      280,  298,  295,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  296,  280,  280,  299,  280,  297,  293,
      293,  293,  293,  293,  298,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  299,  280,

      280,  280,  280,  293,  293,  293,  293,  293,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  300,  301,
      280,  280,  302,  293,  293,  293,  293,  280,  303,  280,
      280,  280,  280,  304,  280,  280,  280,  300,  280,  301,
      280,  305,  302,  293,  293,  293,  293,  280,  303,  280,
      280,  280,  280,  304,  280,  306,  307,  280,  305,  280,
      293,  293,  293,  308,  280,  309,  306,  310,  280,  311,
      280,  309,  280,  280,  310,  280,  280,  311,  280,    0,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280
    } ;

static yyconst flex_int16_t yy_nxt[817] =
    {   0,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   29,   28,   28,   28,   28,   28,   28,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   28,   31,   91,  276,   92,   32,
       33,   34,   35,   33,   33,   36,   33,   33,   33,   33,
       37,   33,   38,   48,   62,  279,   33,   33,   33,   49,
       49,   48,   49,   50,   63,   57,  271,   49,   49,   58,
       49,   50,   59,   62,   93,   96,   60,  154,  108,   97,
      155,   94,  109,   63,   33,   33,   34,   35,   33,   33,

       36,   33,   33,   33,   33,   37,   33,   38,   91,   62,
       92,   33,   33,   33,   64,   62,   66,   62,   65,   63,
       67,  264,   64,   62,   93,   63,   65,   63,   88,   28,
       91,   94,   92,   63,  260,  116,   89,  117,   90,   33,
       40,   41,   42,   40,   40,   40,   40,   40,   40,   43,
       40,   44,   45,   40,   40,   40,   40,   40,   40,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   40,   51,   51,   52,   51,   51,
       51,   51,   51,   51,   51,   53,   51,   54,   55,   55,

       55,   51,   51,   51,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   51,
       68,   69,   70,   68,   71,   72,   73,   74,   73,   73,
       73,   68,   75,   76,   77,   77,   78,   79,   80,   81,
       81,   81,   81,   81,   81,   81,   82,   83,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   84,   81,   81,
       81,   81,   85,   81,   86,   88,   28,   91,  124,   92,
      119,  119,  119,   89,  122,   90,   98,   99,  123,  126,
       91,  128,   92,  127,  130,  132,  135,   91,  131,   92,

      136,  137,  148,  149,  125,  143,  143,  151,  152,  273,
      274,  100,  101,  144,  145,  102,  103,  129,   96,  108,
      104,  133,   97,  109,  134,  105,  106,  138,  165,   91,
      134,  162,  144,   93,  166,  145,  146,  146,  146,  269,
       94,  167,  163,  163,  147,  163,  168,  119,  119,  119,
      122,  132,  126,  175,  123,  176,  127,  176,  130,  165,
      132,  165,  131,  147,  135,  166,  137,  166,  136,  178,
      137,  176,  163,  143,  143,  203,  257,  133,  189,  163,
      134,  144,  146,  146,  146,  190,  133,  273,  274,  134,
      147,  255,  138,  266,  203,  134,  138,  196,  201,  134,

      144,  163,  163,  163,  163,  197,  202,  276,  276,  147,
      163,  273,  274,  265,  277,  277,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   95,  250,  264,  263,   95,  262,
      261,  260,   95,   95,   95,  107,  107,  241,  107,  239,
      107,  107,  111,  111,  111,  114,  114,  114,  115,  115,
      258,  115,  115,  257,  256,  115,  115,  115,  115,  115,

      118,  118,  255,  118,  118,  118,  118,  120,  120,  120,
      121,  121,  121,  153,  153,  153,  160,  160,  253,  252,
      160,  160,  160,  251,  160,  160,  160,  160,  163,  163,
      250,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      174,  174,  248,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  179,  179,  185,  185,  247,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  243,  243,  246,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      267,  267,  245,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  268,  244,  242,  241,  239,  237,  236,  235,
      234,  268,  268,  270,  233,  232,  231,  230,  229,  228,
      227,  226,  270,  270,  272,  272,  225,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  275,  275,  224,  223,

      222,  200,  221,  220,  275,  275,  275,  278,  219,  218,
      217,  278,  216,  215,  214,  278,  278,  278,  213,  212,
      211,  210,  209,  208,  207,  206,  205,  204,  200,  198,
      173,  195,  194,  193,  192,  191,  188,  187,  186,  184,
      183,  182,  181,  180,  139,  177,  176,  113,  112,  173,
      110,  172,  171,  170,  169,  164,  161,  159,  158,  157,
      156,  150,  142,  141,  140,  139,  113,  112,  110,  280,
       27,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280
    } ;

static yyconst flex_int16_t yy_chk[817] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,   29,  276,   29,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    9,   17,  271,    3,    3,    3,    9,
        9,   10,    9,    9,   17,   14,  265,   10,   10,   14,
       10,   10,   16,   19,   30,   31,   16,   82,   34,   31,
       82,   30,   34,   19,    3,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,   38,   21,
       38,    4,    4,    4,   18,   18,   20,   20,   18,   21,
       20,  264,   22,   22,   93,   18,   22,   20,   25,   25,
       45,   93,   45,   22,  259,   50,   25,   50,   25,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   26,   54,   58,   54,
       55,   55,   55,   26,   57,   26,   32,   32,   57,   59,
       63,   60,   63,   59,   64,   65,   66,   75,   64,   75,

       66,   67,   78,   78,   58,   76,   76,   80,   80,  268,
      268,   32,   32,   76,   76,   32,   32,   60,   96,  108,
       32,   65,   96,  108,   65,   32,   32,   67,  101,   90,
       67,   90,   76,   95,  101,   76,   77,   77,   77,  258,
       95,  102,  117,  117,   77,  117,  102,  119,  119,  119,
      122,  131,  126,  125,  122,  125,  126,  129,  130,  125,
      132,  129,  130,   77,  135,  125,  136,  129,  135,  138,
      137,  138,  162,  143,  143,  179,  257,  131,  167,  162,
      131,  143,  146,  146,  146,  167,  132,  273,  273,  132,
      146,  254,  136,  253,  179,  136,  137,  175,  178,  137,

      143,  174,  174,  185,  174,  175,  178,  270,  278,  146,
      185,  275,  275,  251,  270,  278,  281,  281,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  285,  249,  248,  247,  285,  245,
      244,  242,  285,  285,  285,  286,  286,  240,  286,  238,
      286,  286,  287,  287,  287,  288,  288,  288,  289,  289,
      237,  289,  289,  236,  235,  289,  289,  289,  289,  289,

      290,  290,  234,  290,  290,  290,  290,  291,  291,  291,
      292,  292,  292,  293,  293,  293,  294,  294,  233,  232,
      294,  294,  294,  230,  294,  294,  294,  294,  295,  295,
      229,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      296,  296,  228,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  297,  297,  298,  298,  227,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  299,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  299,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,

      301,  301,  302,  302,  226,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      306,  306,  225,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  307,  224,  221,  220,  219,  218,  217,  216,
      215,  307,  307,  308,  214,  213,  212,  211,  210,  209,
      207,  206,  308,  308,  309,  309,  205,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  310,  310,  204,  202,

      201,  199,  198,  197,  310,  310,  310,  311,  196,  195,
      194,  311,  193,  192,  191,  311,  311,  311,  190,  189,
      188,  187,  186,  184,  183,  182,  181,  180,  177,  176,
      173,  172,  171,  170,  169,  168,  166,  165,  164,  158,
      157,  156,  155,  154,  139,  134,  133,  113,  112,  110,
      109,  106,  105,  104,  103,  100,   89,   86,   85,   84,
       83,   79,   74,   72,   71,   69,   43,   41,   36,   27,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,

      280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      280,  280,  280,  280,  280,  280
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yyg->yy_full_match; /* restore poss. backed-over text */ \
yyg->yy_lp = yyg->yy_full_lp; /* restore orig. accepting pos. */ \
yyg->yy_state_ptr = yyg->yy_full_state; /* restore orig. state */ \
yy_current_state = *yyg->yy_state_ptr; /* restore curr. state */ \
++yyg->yy_lp; \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "shader/pp.l"
#line 2 "shader/pp.l"
/**
 * Copyright 2010,2011 Riku Palomäki.
 * This file is part of GLSL Lab.
 *
 * GLSL Lab is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License Version 3 as
 * published by the Free Software Foundation.
 *
 * GLSL Lab is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GLSL Lab.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <cassert>

#include "shader/glpp.hpp"
#include "pp_yacc.h"

char* skip_(char* str, int s, int epos);
char* copystr(const char* str);

#define skip(s, e) yylval->string = skip_((yytext), (s), (yyleng)-(e))
#define skip2(s, e) yylval->string = skip_((yytext), (s), -(yyleng - (e)))

#define YY_DECL int GLpp::lex(YYSTYPE* yylval_param)
#define ECHO m_out.append(yytext, yyleng)
/* Do not call ppwrap() at the EOF
(meant to select the next file, maybe when using #include etc) */

#line 786 "lex.pp.c"

#define INITIAL 0
#define OBJ 1
#define FUNC 2
#define CTRL 3
#define CALL 4
#define FOBJ 5
#define IF 6
#define ELSE 7
#define IF_SKIP 8
#define IF_SEEK 9
#define ELSE_SKIP 10
#define EVAL 11
#define IN_COMMENT 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;

    /* These are only needed for trailing context rules,
     * but there's no conditional variable for that yet. */
    int yy_looking_for_trail_begin;
    int yy_full_lp;
    int *yy_full_state;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int pplex_init (yyscan_t* scanner);

int pplex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int pplex_destroy (yyscan_t yyscanner );

int ppget_debug (yyscan_t yyscanner );

void ppset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE ppget_extra (yyscan_t yyscanner );

void ppset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *ppget_in (yyscan_t yyscanner );

void ppset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *ppget_out (yyscan_t yyscanner );

void ppset_out  (FILE * out_str ,yyscan_t yyscanner );

int ppget_leng (yyscan_t yyscanner );

char *ppget_text (yyscan_t yyscanner );

int ppget_lineno (yyscan_t yyscanner );

void ppset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * ppget_lval (yyscan_t yyscanner );

void ppset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int ppwrap (yyscan_t yyscanner );
#else
extern int ppwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int pplex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int pplex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 55 "shader/pp.l"


#line 1054 "lex.pp.c"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! yyg->yy_state_buf )
            yyg->yy_state_buf = (yy_state_type *)ppalloc(YY_STATE_BUF_SIZE  ,yyscanner);
            if ( ! yyg->yy_state_buf )
                YY_FATAL_ERROR( "out of dynamic memory in pplex()" );

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			ppensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				pp_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		pp_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();

		yyg->yy_state_ptr = yyg->yy_state_buf;
		*yyg->yy_state_ptr++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 281 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yyg->yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 280 );

yy_find_action:
		yy_current_state = *--yyg->yy_state_ptr;
		yyg->yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yyg->yy_lp && yyg->yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yyg->yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yyg->yy_looking_for_trail_begin )
					{
					if ( yy_act == yyg->yy_looking_for_trail_begin )
						{
						yyg->yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yyg->yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yyg->yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yyg->yy_full_match = yy_cp;
					yyg->yy_full_state = yyg->yy_state_ptr;
					yyg->yy_full_lp = yyg->yy_lp;
					break;
					}
				++yyg->yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yyg->yy_state_ptr;
			yyg->yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
#line 58 "shader/pp.l"
{ yy_pop_state(yyscanner); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "shader/pp.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 60 "shader/pp.l"

	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 61 "shader/pp.l"
{ m_out.push_back('\n'); }
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 65 "shader/pp.l"
{ yy_push_state(IN_COMMENT, yyscanner); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "shader/pp.l"

	YY_BREAK

/* Nested #if when processing ignored block */

case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 71 "shader/pp.l"
{ yy_push_state(IF_SKIP, yyscanner); m_out.push_back('\n'); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "shader/pp.l"

	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 73 "shader/pp.l"
{ m_out.push_back('\n'); }
	YY_BREAK

/* elif when we have already found true block */
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 77 "shader/pp.l"
{ BEGIN(IF_SKIP); m_out.push_back('\n'); }
	YY_BREAK
/* elif when we are still looking for a true block */

case 11:
YY_RULE_SETUP
#line 81 "shader/pp.l"
{ return HASH_ELIF; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 82 "shader/pp.l"
{ BEGIN(ELSE); }
	YY_BREAK

/* else when we have already found true block */
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 86 "shader/pp.l"
{ BEGIN(ELSE_SKIP); m_out.push_back('\n'); }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 88 "shader/pp.l"
{ yy_pop_state(yyscanner); /* m_out.push_back('\n'); */ }
	YY_BREAK

/* Nested or top-level #if when processing normal block */
/** @todo most of these shouldn't actually use eval state */
case 15:
YY_RULE_SETUP
#line 93 "shader/pp.l"
{ yy_push_state(EVAL, yyscanner); return HASH_IFNDEF; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 94 "shader/pp.l"
{ yy_push_state(EVAL, yyscanner); return HASH_IFDEF; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 95 "shader/pp.l"
{ yy_push_state(EVAL, yyscanner); return HASH_IF; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 96 "shader/pp.l"
{ yy_push_state(EVAL, yyscanner); return HASH_VERSION; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 97 "shader/pp.l"
{ yy_push_state(EVAL, yyscanner); return HASH_EXTENSION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 98 "shader/pp.l"
{ return HASH_PRAGMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 99 "shader/pp.l"
{ return HASH_INCLUDE; }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 100 "shader/pp.l"
{ return HASH_LINE; m_out.push_back('\n'); }
	YY_BREAK
/* {HASH}line{HSPACE}+{DIGITS}{HSPACE}*$ { return HASH_LINE; } */
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 102 "shader/pp.l"
{ m_out.push_back('\n'); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 104 "shader/pp.l"
{
    skip2(5, 1);
    return HASH_ERROR;
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "shader/pp.l"
{
    yy_push_state(OBJ, yyscanner);
    skip2(6, 0);
    return DEFINE_OBJ;
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 115 "shader/pp.l"
{
    yy_push_state(FUNC, yyscanner);
    skip(6, 1);
    return DEFINE_FUNC;
  }
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 121 "shader/pp.l"
{
    skip2(5, 1);
    return UNDEF;
  }
	YY_BREAK


case 28:
YY_RULE_SETUP
#line 128 "shader/pp.l"
{ yylval->string = copystr(yytext); return CHUNK; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "shader/pp.l"
{ return PASTE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "shader/pp.l"
{ yylval->string = copystr(yytext); return CHUNK; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "shader/pp.l"
{ yylval->string = copystr(yytext); return IDENTIFIER; }
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 132 "shader/pp.l"
{ yy_pop_state(yyscanner); m_out.push_back('\n'); return NL; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "shader/pp.l"
{ assert(false); }
	YY_BREAK


case 34:
YY_RULE_SETUP
#line 137 "shader/pp.l"
{ yylval->string = copystr(yytext); return CHUNK; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 138 "shader/pp.l"
{ yylval->string = copystr(yytext); return CHUNK; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 139 "shader/pp.l"
{ yylval->string = copystr(yytext); return IDENTIFIER; }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 140 "shader/pp.l"
{ yy_pop_state(yyscanner); m_out.push_back('\n'); return NL; }
	YY_BREAK


case 38:
YY_RULE_SETUP
#line 144 "shader/pp.l"
{ BEGIN(FOBJ); return ')'; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 145 "shader/pp.l"
{ return ','; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "shader/pp.l"
{ yylval->string = copystr(yytext); return IDENTIFIER; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "shader/pp.l"

	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 149 "shader/pp.l"
{ fprintf(stderr, "ERROR\n"); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "shader/pp.l"
{ fprintf(stderr, "ERROR2\n"); }
	YY_BREAK

case 44:
YY_RULE_SETUP
#line 153 "shader/pp.l"
{
  /*if (std::find(m_stack.begin(), m_stack.end(), yytext) != m_stack.end()) {
    printf("%s", yytext);
  } else {*/
    if (m_funcs.count(yytext) > 0) {
      yy_push_state(CALL, yyscanner);
      yylval->string = copystr(yytext);
      return EXPAND_FUNC;
    }
    Objs::iterator it = m_objs.find(yytext);
    if (it != m_objs.end()) {
      push_string(yytext, it->second.c_str());
    } else ECHO;
  /*}*/
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 168 "shader/pp.l"
{
  Objs::iterator it = m_objs.find(yytext);
  if (it != m_objs.end() /*&& std::find(m_stack.begin(), m_stack.end(), yytext) == m_stack.end()*/) {
    push_string(yytext, it->second.c_str());
  } else ECHO;
}
	YY_BREAK

/* {IDENTIFIER} { yylval->string = copystr(yytext); return IDENTIFIER; } */
case YY_STATE_EOF(CTRL):
#line 177 "shader/pp.l"
{ pppop_buffer_state(yyscanner); yy_pop_state(yyscanner); /* m_stack.pop_back(); */ }
	YY_BREAK


case 46:
YY_RULE_SETUP
#line 181 "shader/pp.l"
{ return yytext[0]; }
	YY_BREAK
/** @todo comments doesn't work correctly here */
case 47:
YY_RULE_SETUP
#line 183 "shader/pp.l"
{ yylval->string = copystr(yytext); return ARG; }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 184 "shader/pp.l"
{ fprintf(stderr, "ERROR3\n"); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "shader/pp.l"
{ fprintf(stderr, "ERROR4\n"); }
	YY_BREAK


case 50:
YY_RULE_SETUP
#line 189 "shader/pp.l"
{ yylval->integer = strtoll(yytext, NULL, 10); return DECIMAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 190 "shader/pp.l"
{ yylval->integer = strtoll(yytext, NULL, 8); return DECIMAL; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 191 "shader/pp.l"
{ yylval->integer = strtoll(yytext + 2, NULL, 16); return DECIMAL; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 193 "shader/pp.l"
{ return LEFT_SHIFT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 194 "shader/pp.l"
{ return RIGHT_SHIFT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 195 "shader/pp.l"
{ return LESS_OR_EQUAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 196 "shader/pp.l"
{ return GREATER_OR_EQUAL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 197 "shader/pp.l"
{ return EQUAL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 198 "shader/pp.l"
{ return NOT_EQUAL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 199 "shader/pp.l"
{ return AND; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 200 "shader/pp.l"
{ return OR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 201 "shader/pp.l"
{ return PASTE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 202 "shader/pp.l"
{ return DEFINED; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 204 "shader/pp.l"
{ return yytext[0]; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 206 "shader/pp.l"
{ return REQUIRE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 207 "shader/pp.l"
{ return ENABLE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 208 "shader/pp.l"
{ return WARN; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 209 "shader/pp.l"
{ return DISABLE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 211 "shader/pp.l"
{ yylval->string = copystr(yytext); return IDENTIFIER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 213 "shader/pp.l"

	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 214 "shader/pp.l"
{ yy_pop_state(yyscanner); m_out.push_back('\n'); return NL; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 215 "shader/pp.l"
{ fprintf(stderr, "Extra garbage: '%s'\n", yytext); }
	YY_BREAK

case 72:
YY_RULE_SETUP
#line 218 "shader/pp.l"
ECHO;
	YY_BREAK
#line 1612 "lex.pp.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(OBJ):
			case YY_STATE_EOF(FUNC):
			case YY_STATE_EOF(CALL):
			case YY_STATE_EOF(FOBJ):
			case YY_STATE_EOF(IF):
			case YY_STATE_EOF(ELSE):
			case YY_STATE_EOF(IF_SKIP):
			case YY_STATE_EOF(IF_SEEK):
			case YY_STATE_EOF(ELSE_SKIP):
			case YY_STATE_EOF(EVAL):
			case YY_STATE_EOF(IN_COMMENT):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * pplex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( ppwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of pplex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			pprestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) pprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	yyg->yy_state_ptr = yyg->yy_state_buf;
	*yyg->yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 281 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yyg->yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 281 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 280);
	if ( ! yy_is_jam )
		*yyg->yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					pprestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( ppwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void pprestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        ppensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            pp_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	pp_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	pp_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void pp_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		pppop_buffer_state();
	 *		pppush_buffer_state(new_buffer);
     */
	ppensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	pp_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (ppwrap()) processing, but the only time this flag
	 * is looked at is after ppwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void pp_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE pp_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) ppalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pp_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) ppalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in pp_create_buffer()" );

	b->yy_is_our_buffer = 1;

	pp_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with pp_create_buffer()
 * @param yyscanner The scanner object.
 */
    void pp_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		ppfree((void *) b->yy_ch_buf ,yyscanner );

	ppfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a pprestart() or at EOF.
 */
    static void pp_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	pp_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then pp_init_buffer was _probably_
     * called from pprestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void pp_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		pp_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void pppush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	ppensure_buffer_stack(yyscanner);

	/* This block is copied from pp_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from pp_switch_to_buffer. */
	pp_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void pppop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	pp_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		pp_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void ppensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)ppalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ppensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)pprealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in ppensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE pp_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) ppalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in pp_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	pp_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to pplex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       pp_scan_bytes() instead.
 */
YY_BUFFER_STATE pp_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return pp_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to pplex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE pp_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) ppalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in pp_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = pp_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in pp_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) ppalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) pprealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE ppget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int ppget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int ppget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *ppget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *ppget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int ppget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *ppget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void ppset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ppset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ppset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void ppset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "ppset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see pp_switch_to_buffer
 */
void ppset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void ppset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int ppget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void ppset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * ppget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void ppset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* pplex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int pplex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) ppalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* pplex_init_extra has the same functionality as pplex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to ppalloc in
 * the yyextra field.
 */

int pplex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    ppset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) ppalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    ppset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from pplex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

    yyg->yy_state_buf = 0;
    yyg->yy_state_ptr = 0;
    yyg->yy_full_match = 0;
    yyg->yy_lp = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * pplex_init()
     */
    return 0;
}

/* pplex_destroy is for both reentrant and non-reentrant scanners. */
int pplex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		pp_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		pppop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	ppfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        ppfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    ppfree ( yyg->yy_state_buf , yyscanner);
    yyg->yy_state_buf  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * pplex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    ppfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *ppalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *pprealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void ppfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see pprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 218 "shader/pp.l"



char* skip_(char* str, int s, int epos) {
  if (epos >= 0) {
    str[epos] = '\0';
  } else {
    int i = -epos - 1;
    while (i > 0 && (str[i] == ' ' || str[i] == '\t')) --i;
    str[i+1] = '\0';
  }

  while (*str == ' ' || *str == '\t' || *str == '#')
    ++str;
  str += s;
  while (*str == ' ' || *str == '\t')
    ++str;
  return copystr(str);
}

char* copystr(const char* str) {
  return strdup(str);
}

void GLpp::pp_return(bool push, bool b) {
  if (push) {
    yy_push_state(b ? IF : IF_SEEK, yyscanner);
  } else {
    struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
    BEGIN(b ? IF : IF_SEEK);
  }
}

void GLpp::push_string(const char* name, const char* str) {
  // m_stack.push_back(name);
  struct yyguts_t* yyg = (struct yyguts_t*)yyscanner;
  pppush_buffer_state(YY_CURRENT_BUFFER, yyscanner);
  pp_scan_string(str, yyscanner);
  yy_push_state(CTRL, yyscanner);
}

void GLpp::pop() {
  yy_pop_state(yyscanner);
}

