#ifndef SHADER_ERROR_HPP
#define SHADER_ERROR_HPP

#include <QString>

/**
 * ShaderError is a parsed GLSL compile error. These are generated by
 * ShaderCompilerOutputParser.
 */
class ShaderError {
public:
  ShaderError();
  /**
   * @param type Should be "error" or "warning", but might also be
   *        something implementation specific
   * @param line Line numbers start from 0
   * @param column Column numbers start from 0
   * @param length The length of the token/error area where the error was seen.
   *               Editor can use this information to underline the error part.
   */
  ShaderError(QString msg, QString type, int line, int column = 0, int length = 0);

  void setLine(int line) { m_line = line; }
  void setColumn(int column) { m_column = column; }
  void setLength(int length) { m_length = length; }

  /// Error string, usually straight from the external GLSL compiler, but might
  /// be changed to fix line numbers or similar. The compiled source might have
  /// different line numbers to the source in the editor, see ShaderLexer::toLines
  const QString& msg() const { return m_msg; }

  /// Type of the error, can be "error", "warning" or some implementation dependent value
  const QString& type() const { return m_type; }

  /// The line number (starting from zero) the error begins
  int line() const { return m_line; }
  /// The column position (starting from zero) the error begins
  int column() const { return m_column; }
  /// The length of the error area, obviously only a guess
  int length() const { return m_length; }

protected:
  QString m_msg, m_type;
  int m_line, m_column, m_length;
};

#endif
